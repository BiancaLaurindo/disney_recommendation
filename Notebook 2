
 # Análise exploratória de dados (EDA) no dataset disney_recommendation-main, e  criação do modelo de recomendação utilizando K-Nearest Neighbors. 
 # O objetivo é entender melhor os padrões dos dados e sugerir filmes semelhantes com base nas características disponíveis.


# Leitura do dataset a partir de um arquivo CSV
import pandas as pd # type: ignore
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.decomposition import PCA
from sklearn.neighbors import NearestNeighbors
data = pd.read_csv('path_to_disney_dataset.csv')

# Exibindo as primeiras linhas do dataset para inspeção
data.head()

# Verificação de duplicatas
duplicated_rows = data.duplicated().sum()
print(f"Número de linhas duplicadas: {duplicated_rows}")

# Remoção de duplicatas
data = data.drop_duplicates()

# Pairplot para visualizar a relação entre as variáveis numéricas
sns.pairplot(data)
plt.show()

# Verificando a distribuição de outra coluna categórica, por exemplo, 'year'
plt.figure(figsize=(10, 6))
sns.countplot(y='year', data=data, order=data['year'].value_counts().index)
plt.title('Distribuição por Ano')
plt.xlabel('Frequência')
plt.ylabel('Ano')
plt.show()

# Modelagem 
# Padronização de dados
from sklearn.preprocessing import StandardScaler

# Padronização das variáveis
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from sklearn.model_selection import cross_val_score

# Exemplo de validação cruzada com uma métrica específica (por exemplo, precisão)
scores = cross_val_score(model, X_scaled, y, cv=5, scoring='accuracy')
print(f'Acurácia média da validação cruzada: {scores.mean():.2f}')

# Visualizando as recomendações com um scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='genre', y='rating', data=recommended_data, marker='o', color='blue', label='Recomendações')
sns.scatterplot(x='genre', y='rating', data=example, marker='X', color='red', label='Exemplo Selecionado')
plt.title('Recomendações de Filmes')
plt.xlabel('Gênero')
plt.ylabel('Nota')
plt.legend()
plt.show()

from sklearn.metrics import precision_score, recall_score

# Calcule precision@k e recall@k se estiver usando recomendação
precision = precision_score(y_true, y_pred, average='binary')
recall = recall_score(y_true, y_pred, average='binary')
print(f'Precision@k: {precision:.2f}')
print(f'Recall@k: {recall:.2f}')

# Conclusão
# Neste notebook, realizamos uma análise exploratória de dados e criamos um modelo de recomendação baseado no KNN.
# Observamos que os gêneros têm uma correlação moderada com as notas, e o modelo foi capaz de sugerir filmes 
# similares de maneira razoável. Para melhorar o modelo, próximos passos podem incluir a inclusão de novas 
# características como diretor, elenco e tempo de execução, além de explorar técnicas avançadas de recomendação.

# Salvando os dados recomendados em um arquivo CSV
recommended_data.to_csv('recommended_movies.csv', index=False)

import ipywidgets as widgets
from IPython.display import display

# Widget para selecionar um exemplo
genre_widget = widgets.Dropdown(options=data['genre'].unique(), description='Gênero:')
rating_widget = widgets.FloatSlider(min=0, max=10, step=0.1, description='Nota:')

def show_recommendations(genre, rating):
    example = pd.DataFrame({'genre': [genre], 'rating': [rating]})
    distances, indices = model.kneighbors(example)
    recommended_data = data.iloc[indices[0]]
    print("Recomendações:")
    display(recommended_data)

widgets.interact(show_recommendations, genre=genre_widget, rating=rating_widget)
